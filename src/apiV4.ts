/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/projects/{projects_id}/blog_posts.json": {
    /**
     * A list of the blog posts of a betterplace.org project or fundraising event.
     * Results are contained in a *data* attribute.
     *
     * Recommended order is `&order=published_at:desc`.
     *
     * **For [betterplace.org clients](../README.md#client-api):**
     *
     * * _Project Blogposts:_ There is no client-scoped URL.
     * Please use the API calls that are provided inside the client project _url_ response
     * to make sure you only request data that is associated with one of your projects.
     *
     * * _All Blogposts:_ Clients can retrieve a list of all blogpost of all client projects:
     * `/clients/PERMALINK/blog_posts.json`
     */
    get: {
      parameters: {
        path: {
          /** projects_id */
          projects_id: string;
        };
        query: {
          /** Project id as an integer number ≥ 14. */
          project_id?: number;
          /** Fundraising Event id as an integer number ≥ 1. */
          fundraising_event_id?: number;
          page?: number;
          per_page?: number;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": {
              total_entries: number;
              offset: number;
              total_pages: number;
              current_page: number;
              per_page: number;
              data: components["schemas"]["BlogResult"][];
            };
          };
        };
        /** Error */
        default: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/projects/{projects_id}/blog_posts/{blog_posts_id}.json": {
    /**
     * The details of a blog post of a betterplace.org project.
     * The details and list view show the same data.
     *
     * **For [betterplace.org clients](../README.md#client-api):**
     * There is no client-scoped URL.
     * Please use the API calls that are provided inside the client project _url_ response
     * to make sure you only request data that is associated with one of your projects.
     */
    get: {
      parameters: {
        path: {
          /** projects_id */
          projects_id: string;
          /** blog_posts_id */
          blog_posts_id: string;
        };
        query: {
          /** Project id as an integer number ≥ 14. */
          project_id: number;
          /** Blogpost id as an integer number ≥ 9. */
          id: number;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["BlogResult"];
          };
        };
        /** Error */
        default: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/projects/{projects_id}/categories.json": {
    /**
     * A list of betterplace.org project categories.
     * Results are contained in a *data* attribute.
     */
    get: {
      parameters: {
        path: {
          /** projects_id */
          projects_id: string;
        };
        query: {
          /** Project id as an integer number ≥ 14. */
          project_id: number;
          page?: number;
          per_page?: number;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": {
              total_entries: number;
              offset: number;
              total_pages: number;
              current_page: number;
              per_page: number;
              data: components["schemas"]["CategoryResult"][];
            };
          };
        };
        /** Error */
        default: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/clients/{clients_id}/client_donations.json": {
    /**
     * **For [betterplace.org clients](../README.md#client-api) only:**
     *
     * This API returns all donations to all client projects that where made using
     * the client donation form (but none of the other donation-sources).
     *
     * Results are contained in a *data* attribute.
     */
    get: {
      parameters: {
        path: {
          /** clients_id */
          clients_id: string;
        };
        query: {
          /** The betterplace.org-internal client permalink. */
          client_id: string;
          /**
           * You can search for a specific client_reference: <code>?facets=client_reference:54</code>
           *
           * <br>
           * Example:
           * <a href="https://api.betterplace.org/en/api_v4/clients/karmic_minion/client_donations?facets=client_reference:54">
           *   <code>https://api.betterplace.org/en/api_v4/ clients/karmic_minion/ client_donations?facets=client_reference:54</code>
           * </a>
           *
           * <br>
           * This feature is only used in some cases that relate to the
           * <a href="../donation_form/third_party_app_donation_form.md">ThirdPartyApp custom donation form for organisations</a>
           * and the <a href="client_donation_pledges.md">Client donation pledge endpoint</a>.
           */
          facets?: string;
          page?: number;
          per_page?: number;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": {
              total_entries: number;
              offset: number;
              total_pages: number;
              current_page: number;
              per_page: number;
              data: components["schemas"]["ClientDonationResult"][];
            };
          };
        };
        /** Error */
        default: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/clients/{clients_id}/client_donations/{client_donations_id}.json": {
    /**
     * **For [betterplace.org clients](../README.md#client-api) only:**
     *
     * The details of a betterplace.org client donation.
     * The details and list view show the same data.
     */
    get: {
      parameters: {
        path: {
          /** clients_id */
          clients_id: string;
          /** client_donations_id */
          client_donations_id: string;
        };
        query: {
          /** The betterplace.org-internal client permalink. */
          client_id: string;
          /**
           * The donation token that the client donation form passed to the
           * callback url or the client_reference that was provided by the client.
           */
          id: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["ClientDonationResult"];
          };
        };
        /** Error */
        default: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/clients/{clients_id}/tags.json": {
    /**
     * **For [betterplace.org clients](../README.md#client-api) only:**
     *
     * This API returns all tags defined for a client.
     *
     * Results are contained in a *data* attribute.
     */
    get: {
      parameters: {
        path: {
          /** clients_id */
          clients_id: string;
        };
        query: {
          /** The betterplace.org-internal client id */
          client_id: string;
          page?: number;
          per_page?: number;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": {
              total_entries: number;
              offset: number;
              total_pages: number;
              current_page: number;
              per_page: number;
              data: components["schemas"]["ClientTagResult"][];
            };
          };
        };
        /** Error */
        default: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/clients/{clients_id}.json": {
    /** This API endpoint returns links to more specific information about this client. */
    get: {
      parameters: {
        path: {
          /** clients_id */
          clients_id: string;
        };
        query: {
          /** The betterplace.org-internal client permalink */
          id: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["ClientResult"];
          };
        };
        /** Error */
        default: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/users/{users_id}/contact_data.json": {
    /**
     * Name and email for the given user.
     *
     * Used by api clients to access data about
     * the managers of projects that belog to this
     * client.
     *
     * **:lock: Only available if authenticated as a client and only if this clients has permissions to access this data.**
     * See [betterplace.org clients](../README.md#client-api).
     */
    get: {
      parameters: {
        path: {
          /** users_id */
          users_id: string;
        };
        query: {
          /** User-id as an integer number. */
          user_id: number;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["ContactDataResult"];
          };
        };
        /** Error */
        default: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/clients/{clients_id}/projects/{projects_id}/direct_deposits.json": {
    /**
     * Create an unconfirmed direct deposit donation to a project.
     * The donation is confirmed when the money arrives on the betterplace
     * bank account.
     *
     * **:lock: Only available if authenticated as a client.**
     * See [betterplace.org clients](../README.md#client-api).
     *
     * **:lock: This is an experimental feature and needs additional privileges.**
     *
     * ### Response and error codes:
     *
     * [A list of all response and error codes](../README.md#http-status-codes).
     *
     * The most likely ones are:
     *
     * [HTTP Code **`202`**](http://httpstatus.es/202)
     * if the donation was created. The response data
     * will include an IBAN and the reference number to submit the actual
     * bank transfer.
     *
     * [HTTP Code **`422`**](http://httpstatus.es/422)
     * if the submitted resource could not be accepted due to erroneous parameters
     * or missing data.
     */
    post: {
      parameters: {
        path: {
          /** clients_id */
          clients_id: string;
          /** projects_id */
          projects_id: string;
        };
        query: {
          /** The betterplace.org-internal client permalink. */
          client_id: string;
          /** Project id as an integer number ≥ 14. */
          project_id: number;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["DirectDepositResult"];
          };
        };
        /** Error */
        default: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
      /** Creating a Direct Deposit Donation  Request */
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreatingADirectDepositDonationRequest"];
        };
      };
    };
  };
  "/clients/{clients_id}/projects/{projects_id}/donation_pledges.json": {
    /**
     * Submit a donation pledge into the system. This will be transformed into
     * a donation to the receiver. The request has to be a POST request with a
     * JSON body.
     *
     * **:lock: Only available if authenticated as a client.**
     * See [betterplace.org clients](../README.md#client-api).
     *
     *
     * ### Process Flow
     *
     * [This flow chart describes the process…](https://ixwphj.axshare.com/donation-pledge-flow.html).
     *
     *
     * ### What if the donation receiver is fully funded?
     *
     * The donation will be booked in the receiver account even
     * if the receiver is fully funded. The receiver will than show a
     * progress percentage > 100 %. For a project that means, the project
     * manager has to add new money needs to pay out the additional funds.
     *
     * Please note that a closed project is prohibited from receiving donations.
     *
     *
     * ### What if the donation receiver is prohibited from receiving donations?
     *
     * At the time when the pledge is received the system does not check the receiver
     * status. Therefore the API will always respond with a success message for all
     * receivers. Should the receiver be prohibited from receiving donations at the
     * time when the donation is processed, the donation will be redirected to a
     * specific client donation pool. Clients can later forward this money to
     * projects they choose.
     *
     *
     * ### Reconciliation of donation pledges
     *
     * Part of the contract for the usage of this donation pledge API will
     * be the time period in which the pledges need to be reconciled. Ususally
     * every two weeks or once a month. At the end of this time, the client
     * will sum all pledges in the client system, wire us the donations and
     * also send us a CSV file which allows betterplace.org to check the amounts.
     *
     * The fields for the CSV files are:
     * - receiver_type, eg. `Project`
     * - receiver_id, eg. `1114`
     * - amount_in_cents, eg. `12000`
     * - client_reference, eg. `123123123123`
     * - datetime (ISO8601 with Timezone), eg `2007-11-01T13:15:30Z`
     *
     * Please use these names as column titles, use utf-8, use ","
     * as a separator and force double quotes around all values.
     *
     * Here is [a flow chart describing the process](https://ixwphj.axshare.com/money-transfer-flow.html).
     *
     *
     * ### Sending donation pledges to the client-pool
     *
     * It is possible to send donation pledges directly to the client-pool, by
     * submitting to this endpoint instead of the project specific one:
     *
     * `POST https://api.betterplace.org/de/api_v4/clients/{CLIENT}/pool/donation_pledges.json`
     *
     * This endpoint will respond and behave like described above, but the
     * money will be stored on the pool. Clients can later forward this money to
     * projects they choose.
     *
     *
     * ### Response and error codes:
     *
     * [A list of all response and error codes](../README.md#http-status-codes).
     *
     * The most likely ones are:
     *
     * [HTTP Code **`202`**](http://httpstatus.es/202)
     * if a resource was successfully submitted for delayed processing.
     * A successful request will return HTTP status 202 (accepted). The
     * donation pledge is now saved and queued and will be processed
     * by background workers. This part takes place asynchronously and might
     * take up to a few minutes, especially in high traffic scenarios.
     * Please make sure that you queue and retry your API calls until you
     * receive clear answer (202, 422, 404, etc.) from us.
     * Note that we will book only one
     * donation per <code>client_reference</code> so there's no need to
     * worry about retrying the pledge-sending.
     *
     * [HTTP Code **`422`**](http://httpstatus.es/422)
     * if the submitted resource could not be accepted due to erroneous parameters.
     * Please remember to validate all user input on your side before submitting
     * it to the API.
     *
     * [HTTP Code **`404`**](http://httpstatus.es/404)
     * if a requested resource could not be found. This might happen if
     * the resource has been deleted in the timeframe between selection by the
     * user and confirmation of the pledge by the client. In this case, either
     * contact your user and change the resource (most likely a project) or
     * redirect the donation to the client pool (the URL is provided by
     * betterplace.org).
     */
    post: {
      parameters: {
        path: {
          /** clients_id */
          clients_id: string;
          /** projects_id */
          projects_id: string;
        };
        query: {
          /** The betterplace.org-internal client permalink. */
          client_id: string;
          /** Project id as an integer number ≥ 14. */
          project_id: number;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["SuccessResult"];
          };
        };
        /** Error */
        default: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
      /** Creating a Client Donation Pledge  Request */
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreatingAClientDonationPledgeRequest"];
        };
      };
    };
  };
  "/clients/{clients_id}/donation_pledges/{donation_pledges_id}.json": {
    /**
     * **For [betterplace.org clients](../README.md#client-api) only:**
     *
     * After submitting a donation pledge, you should check the status of the asynchronous
     * pledge job. It returns a JSON response, containing information about its status,
     * including failure reasons in the case of a failure.
     *
     * **TODO: Be aware that you need a donation pledge ID to use this endpoint which is not
     * fully implemented yet. Please contact us in case you need it!**
     */
    get: {
      parameters: {
        path: {
          /** clients_id */
          clients_id: string;
          /** donation_pledges_id */
          donation_pledges_id: string;
        };
        query: {
          /** The donation is marked with the language you use in your URL. */
          language: string;
          /** The betterplace.org-internal client permalink. */
          client_id: string;
          /**
           * The ID of the donation pledge.
           *
           * TODO: In the future this will be returned within the
           * response of a successful donation pledge POST.
           */
          id: number;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["MandateProcessResult"];
          };
        };
        /** Error */
        default: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/clients/{clients_id}/projects/{projects_id}/forwarding_requests.json": {
    /**
     * Transfer money from a client donation pool to a Project.
     * The request has to be a POST request with a JSON body.
     *
     * **:lock: Only available if authenticated as a client.**
     * See [betterplace.org clients](../README.md#client-api).
     *
     *
     * ### Process Flow
     *
     * [This flow chart describes the process…](https://ixwphj.axshare.com/forwarding-request-flow.html).
     *
     *
     * ### What if the donation receiver is fully funded?
     *
     * The donation will be booked in the receiver account even
     * if the receiver is fully funded. The receiver will than show a
     * progress percentage > 100 %. For a project that means, the project
     * manager has to add new money needs to pay out the additional funds.
     *
     * Please note that closed projects are prohibited from receiving donations.
     *
     *
     * ### What if the donation receiver is prohibited from receiving donations?
     *
     * At the time when the forwarding request is received, the system does not
     * check the receiver status. Therefore the API will always respond with a
     * success message for all receivers.
     *
     * Should the receiver be prohibited from receiving donations at the time
     * when the donation is processed, the forwarding will not be inserted into
     * the system. The forwarding request will then be marked as "failed" and
     * the "error_reason" field holds detailed information about the problem.
     * Learn more at [Client Forwarding Request Status](client_forwarding_request_details.md).
     *
     * There are two possible next steps:
     *
     * _Option 1:_ Handle those cases manually with the betterplace.org-support-team.
     * This option is only feasible in selected cases.
     *
     * _Option 2:_ The client system reacts to the error-state of the
     * forwarding request automatically. For example by moving the donation
     * to a fallback project.
     *
     *
     * ### Response and error codes:
     *
     * [A list of all response and error codes](../README.md#http-status-codes).
     *
     * The most likely ones are:
     *
     * [HTTP Code **`202`**](http://httpstatus.es/202)
     * if a resource was successfully submitted for delayed processing.
     * A successful request will return HTTP status 202 (accepted). The
     * forwarding request is now saved and queued and will be processed
     * by background workers. This part takes place asynchronously and might
     * take up to a few minutes, especially in high traffic scenarios.
     * Please make sure that you queue and retry your API calls until you
     * receive clear answer (202, 422, 404, etc.) from us.
     * Note that we will book only one
     * donation per <code>client_reference</code> so there's no need to
     * worry about retrying the forwarding.
     *
     * [HTTP Code **`422`**](http://httpstatus.es/422)
     * if the submitted resource could not be accepted due to erroneous parameters.
     * Please remember to validate all user input on your side before submitting
     * it to the API.
     *
     * [HTTP Code **`404`**](http://httpstatus.es/404)
     * if a requested resource could not be found. This might happen if
     * the resource has been deleted in the timeframe between selection by the
     * user and confirmation of the forwarding request by the client. In this
     * case, either contact your user and change the resource (most likely a
     * project) or redirect the donation to the client pool (the URL is
     * provided by betterplace.org).
     */
    post: {
      parameters: {
        path: {
          /** clients_id */
          clients_id: string;
          /** projects_id */
          projects_id: string;
        };
        query: {
          /** The betterplace.org-internal client permalink. */
          client_id: string;
          /** Project id as an integer number ≥ 14. */
          project_id: number;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["SuccessResult"];
          };
        };
        /** Error */
        default: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
      /** Creating a Client Forwarding Request  Request */
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreatingAClientForwardingRequestRequest"];
        };
      };
    };
  };
  "/clients/{clients_id}/forwarding_requests/{forwarding_requests_id}.json": {
    /**
     * **For [betterplace.org clients](../README.md#client-api) only:**
     *
     * After submitting a forwarding request, you should check the status of the asynchronous
     * forwarding job. It returns a JSON response, containing information about its status,
     * including failure reasons in the case of a failure.
     */
    get: {
      parameters: {
        path: {
          /** clients_id */
          clients_id: string;
          /** forwarding_requests_id */
          forwarding_requests_id: string;
        };
        query: {
          /** The donation is marked with the language you use in your URL. */
          language: string;
          /** The betterplace.org-internal client permalink. */
          client_id: string;
          /**
           * The ID of the forwarding request, returned within the
           * response of a successful forwarding request POST.
           */
          id: number;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["MandateProcessResult"];
          };
        };
        /** Error */
        default: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/fundraising_events/{fundraising_events_id}/featured_projects.json": {
    /**
     * A list of projects that are currently supported by the fundraising event.
     *
     * **This is an experimental feature and is still under heavy development. Please use it with caution.**
     */
    get: {
      parameters: {
        path: {
          /** fundraising_events_id */
          fundraising_events_id: string;
        };
        query: {
          /** Fundraising Event id as an integer number ≥ 1. */
          fundraising_event_id: number;
          page?: number;
          per_page?: number;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": {
              total_entries: number;
              offset: number;
              total_pages: number;
              current_page: number;
              per_page: number;
              data: components["schemas"]["ProjectResult"][];
            };
          };
        };
        /** Error */
        default: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/fundraising_events/{fundraising_events_id}/forwardings.json": {
    /**
     * A list of forwarings from the fundraising event to its projects.
     *
     * **This is an experimental feature and is still under heavy development. Please use it with caution.**
     */
    get: {
      parameters: {
        path: {
          /** fundraising_events_id */
          fundraising_events_id: string;
        };
        query: {
          /** Fundraising Event id as an integer number ≥ 1. */
          fundraising_event_id: number;
          page?: number;
          per_page?: number;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": {
              total_entries: number;
              offset: number;
              total_pages: number;
              current_page: number;
              per_page: number;
              data: components["schemas"]["FundraisingEventForwardingResult"][];
            };
          };
        };
        /** Error */
        default: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/clients/{clients_id}/fundraising_event_statistics.json": {
    /**
     * **For [betterplace.org clients](../README.md#client-api) only:**
     * Some client-statistics for a betterplace.org client. All results are cached for 20 minutes.
     */
    get: {
      parameters: {
        path: {
          /** clients_id */
          clients_id: string;
        };
        query: {
          /** The betterplace.org-internal client permalink */
          client_id: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["ClientStatisticFundraisingEventResult"];
          };
        };
        /** Error */
        default: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/fundraising_events.json": {
    /**
     * A list of betterplace.org fundraising events (donate money).
     * Results are contained in a *data* attribute.
     *
     * **For [betterplace.org clients](../README.md#client-api):**
     * Use this resource as follows: `/clients/PERMALINK/fundraising-events.json`.
     *
     * To guarantee stable search results, all clients are required to specify at least one facet
     * and order with each request as explained below.
     */
    get: {
      parameters: {
        query: {
          /**
           * Use the scope to specify how the search-query <code>q</code> should behave:
           * <ul>
           * <li>"no scope" (default) performs a full text search
           * <li><code>human_name</code> searches only on the manager-fullname and carrier-fullname.
           *   Use this to get all entities by "Unicef" or by "Till Behnke".
           * </ul>
           * <a href="../README.md#request-parameter-format">Learn how to format the parameter</a>.
           */
          scope?: string;
          /** Search query. The searches behaviour is based on the scope. */
          q?: string;
          /**
           * Filter the result set.
           * <br>
           * It is strongly recommended to <strong>specify facets</strong> with each request.
           * A recommended set of facets is
           * <code>closed:false| prohibit_donations:false</code>
           * (without the spaces) which only shows active fundraising events that can receive donations.
           * <br>
           * <em>Supported filters are:</em>
           * <ul>
           * <li><code>prohibit_donations:true/false</code>
           * <li><code>completed:true/false</code> –
           * is this fundraising event fully financed (100 %)? See <code>completed_at</code>
           * <li><code>closed:true/false</code> –
           * has this fundraising event been closed by its manager? See <code>closed_at</code>
           * <li><code>prohibit_donations:true/false</code> –
           * are donations to this fundraising event forbidden at the moment? Closed and blocked
           * fundraising events will always return true, for example.
           * </ul>
           * It is possible to set multiple facet filters.
           * <a href="../README.md#request-parameter-format">Learn how to format the parameter</a>.
           */
          facets?: string;
          /**
           * Order the result set.
           * <br>
           * It is strongly recommended to <strong>specify an order</strong> with each request.
           * The default order might change at any time without notice.
           * A recommended order is
           * <code> score:desc|closed:asc|completed:asc|rank:desc|last_donation_at:desc</code>
           * (without the spaces).
           * <br>
           * <em>Supported orders are:</em>
           * <ul>
           * <li><code>score:ASC/DESC</code> – as provided by the search engine whenever a search term
           * is given.
           * <li><code>rank:ASC/DESC</code> – a betterplace.org-specific, platform-wide activity indicator
           * <li><code>last_donation_at:ASC/DESC</code>
           * <li><code>completed:ASC/DESC</code>
           * <li><code>closed:ASC/DESC</code>
           * </ul>
           * It is possible to set multiple order parameters.
           * <a href="../README.md#request-parameter-format">Learn how to format the parameter</a>.
           */
          order?: string;
          page?: number;
          per_page?: number;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": {
              total_entries: number;
              offset: number;
              total_pages: number;
              current_page: number;
              per_page: number;
              data: components["schemas"]["FundraisingEventResult"][];
            };
          };
        };
        /** Error */
        default: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/fundraising_events/{fundraising_events_id}.json": {
    /**
     * The details of a betterplace.org fundraising events (donate money).
     *
     * **For [betterplace.org clients](../README.md#client-api):**
     * Use this resource as follows: `/clients/PERMALINK/fundraising-events/ID.json`
     */
    get: {
      parameters: {
        path: {
          /** fundraising_events_id */
          fundraising_events_id: string;
        };
        query: {
          /** Fundraising Event id as an integer number ≥ 1. */
          id: number;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["FundraisingEventResult"];
          };
        };
        /** Error */
        default: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/clients/{clients_id}/projects/{projects_id}/mailing_subscriptions.json": {
    /**
     * Create or update a mailing subscriptions for a project.
     *
     * **:lock: Only available if authenticated as a client.**
     * See [betterplace.org clients](../README.md#client-api).
     *
     *
     * ### Process Flow
     *
     * [This flow chart describes the process…](https://ixwphj.axshare.com/user-subscriptions-flow.html).
     *
     *
     * ### Response and error codes:
     *
     * A successful request will return HTTP status 201 (created).
     *
     * If an error occurs the HTTP return code will be 422 (unprocessable
     * entity). [More error codes](../README.md#http-status-codes).
     */
    post: {
      parameters: {
        path: {
          /** clients_id */
          clients_id: string;
          /** projects_id */
          projects_id: string;
        };
        query: {
          /**
           * The subscription is marked with the language you use in your URL.
           * Newsletter authors write their content in a specific lang which you can
           * target with the subscription lang. To target a lang see
           * <a href="../README.md#addressing-the-locale-of-a-resource">api setting lang</a>.
           */
          language: string;
          /** The betterplace.org-internal client permalink. */
          client_id: string;
          /** Project id as an integer number ≥ 14. */
          project_id: number;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["SuccessResult"];
          };
        };
        /** Error */
        default: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
      /** Client Mailing Subscriptions Request */
      requestBody: {
        content: {
          "application/json": components["schemas"]["ClientMailingSubscriptionsRequest"];
        };
      };
    };
  };
  "/matching_funds.json": {
    /** A list of betterplace.org matching funds. */
    get: {
      parameters: {
        query: {
          /**
           * Optional project id as an integer number ≥ 14.
           * Allows to filter the list of matching funds.
           * This way one can show a list of matching funds where
           * the given project is part of the matching fund projects list.
           */
          project_id?: number;
          /**
           * Filter the result set by <code>state</code> (activated|closed)
           * <a href="../README.md#request-parameter-format">Learn how to format the parameter</a>.
           */
          facets?: string;
          page?: number;
          per_page?: number;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": {
              total_entries: number;
              offset: number;
              total_pages: number;
              current_page: number;
              per_page: number;
              data: components["schemas"]["MatchingFundResult"][];
            };
          };
        };
        /** Error */
        default: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/matching_funds/{matching_funds_id}.json": {
    /**
     * The details of a betterplace.org matching fund.
     * The details and list view show the same data.
     */
    get: {
      parameters: {
        path: {
          /** matching_funds_id */
          matching_funds_id: string;
        };
        query: {
          /** matching-fund-id as an integer number ≥ 9. */
          id: number;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["MatchingFundResult"];
          };
        };
        /** Error */
        default: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/projects/{projects_id}/needs.json": {
    /**
     * A list of betterplace.org projects needs (donate money).
     * Results are contained in a *data* attribute.
     * The details and list view show the same data per project need.
     *
     * **For [betterplace.org clients](../README.md#client-api):**
     * There is no client-scoped URL.
     * Please use the API calls that are provided inside the client project _url_ response
     * to make sure you only request data that is associated with one of your projects.
     */
    get: {
      parameters: {
        path: {
          /** projects_id */
          projects_id: string;
        };
        query: {
          /** Project id as an integer number ≥ 14. */
          project_id: number;
          /**
           * Filter the result set.
           * Documented and supported filters are:
           * <ul>
           *   <li><code>completed:true/false</code> – is this need fully funded?
           * </ul>
           * <a href="../README.md#request-parameter-format">Learn how to format the parameter</a>.
           */
          facets?: string;
          /**
           * Order the result set. Documented and supported orders are:
           * <ul>
           *   <li><code>created_at:asc/desc</code> – DESC: Latest needs first.
           *   <li><code>position:asc/desc</code> – Priority of the need defined by the project manager
           * </ul>
           * <a href="../README.md#request-parameter-format">Learn how to format the parameter</a>.
           */
          order?: string;
          page?: number;
          per_page?: number;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": {
              total_entries: number;
              offset: number;
              total_pages: number;
              current_page: number;
              per_page: number;
              data: components["schemas"]["NeedResult"][];
            };
          };
        };
        /** Error */
        default: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/projects/{projects_id}/needs/{needs_id}.json": {
    /**
     * The details of a betterplace.org project need (donate money).
     * The details and list view show the same data per project need.
     *
     * **For [betterplace.org clients](../README.md#client-api):**
     * There is no client-scoped URL.
     * Please use the API calls that are provided inside the client project _url_ response
     * to make sure you only request data that is associated with one of your projects.
     */
    get: {
      parameters: {
        path: {
          /** projects_id */
          projects_id: string;
          /** needs_id */
          needs_id: string;
        };
        query: {
          /** Project id as an integer number ≥ 14. */
          project_id: number;
          /** Need-id as an integer number ≥ 29. */
          id: number;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["NeedResult"];
          };
        };
        /** Error */
        default: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/clients/{clients_id}/newsletter_opt_ins.json": {
    /**
     * Start the opt-in process to subscribe an email address to the
     * betterplace platform newsletter.
     *
     * **:lock: Only available if authenticated as a client.**
     * See [betterplace.org clients](../README.md#client-api).
     *
     * ### Response and error codes:
     *
     * A successful request will return HTTP status 201 (created).
     *
     * If an error occurs the HTTP return code will be 422 (unprocessable
     * entity). [More error codes](../README.md#http-status-codes).
     */
    post: {
      parameters: {
        path: {
          /** clients_id */
          clients_id: string;
        };
        query: {
          /** The betterplace.org-internal client permalink. */
          client_id: string;
          /** The language preference of the subscriber. */
          language: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["SuccessResult"];
          };
        };
        /** Error */
        default: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
      /** Client Newsletter OptIns Request */
      requestBody: {
        content: {
          "application/json": components["schemas"]["ClientNewsletterOptInsRequest"];
        };
      };
    };
  };
  "/projects/{projects_id}/opinions.json": {
    /**
     * A list of betterplace.org projects or fundraising event opinions (donate money).
     * There is no details view for opinions.
     *
     * * Example for project opinions `…/api_v4/projects/1114/opinions.json`
     * * Example for fundraising event opinions `…/api_v4/fundraising_events/19267/opinions.json`
     *
     * Results are contained in a *data* attribute.
     */
    get: {
      parameters: {
        path: {
          /** projects_id */
          projects_id: string;
        };
        query: {
          /**
           * Project id as an integer number ≥ 14.
           * This parameter is required in case you want to show project opinions.
           * Also check the URL example in the introduction.
           */
          project_id?: number;
          /**
           * Fundraising Event id as an integer number ≥ 1.
           * This parameter is required in case you want to show fundraising event opinions.
           * Also check the URL example in the introduction.
           */
          fundraising_event_id?: number;
          /**
           * Order the result set.
           * <br>
           * It is strongly recommended to <strong>specify an order</strong> with each request.
           * The default order might change at any time without notice.
           * A recommended order is <code>confirmed_at:DESC</code>, which sorts the
           * project opinions by the confirmation time in descending order.
           * This is also the order of the opinions
           * list on the betterplae project details page</a>.<br>
           * <em>Other supported orders are:</em>
           * <ul>
           * <li><code>created_at:ASC/DESC</code>
           * <li><code>updated_at:ASC/DESC</code>
           * <li><code>confirmed_at:ASC/DESC</code>
           * <li><code>id:ASC/DESC</code>
           * <li><code>amount_in_cents:ASC/DESC</code>
           * </ul>
           * It is possible to set multiple order parameters.
           * <a href="../README.md#request-parameter-format">Learn how to format the parameter</a>.
           */
          order?: string;
          /**
           * Filter the result set.
           * Documented and supported filters are:
           * <ul>
           *   <li><code>has_message:true/false</code> – did the donor add a message to her donation
           * </ul>
           * <a href="../README.md#request-parameter-format">Learn how to format the parameter</a>.
           */
          facets?: string;
          page?: number;
          per_page?: number;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": {
              total_entries: number;
              offset: number;
              total_pages: number;
              current_page: number;
              per_page: number;
              data: components["schemas"]["DonationResult"][];
            };
          };
        };
        /** Error */
        default: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/organisations.json": {
    /**
     * A list of betterplace.org organisations.
     * Results are contained in a *data* attribute.
     * The details and list view show the same data per organisation.
     *
     * **For [betterplace.org clients](../README.md#client-api):**
     * This resource is not available at the moment.
     */
    get: {
      parameters: {
        query: {
          page?: number;
          per_page?: number;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": {
              total_entries: number;
              offset: number;
              total_pages: number;
              current_page: number;
              per_page: number;
              data: components["schemas"]["OrganisationResult"][];
            };
          };
        };
        /** Error */
        default: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/organisations/{organisations_id}.json": {
    /**
     * The details of a betterplace.org organisation.
     * The details and list view show the same data per organisation.
     *
     * **For [betterplace.org clients](../README.md#client-api):**
     * There is no client-scoped URL.
     * Please use the API calls that are provided inside the client project _url_ response
     * to make sure you only request data that is associated with one of your projects.
     */
    get: {
      parameters: {
        path: {
          /** organisations_id */
          organisations_id: string;
        };
        query: {
          /** Organisation-id as an integer number ≥ 14. */
          id: number;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["OrganisationResult"];
          };
        };
        /** Error */
        default: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/clients/{clients_id}/pool.json": {
    /**
     * The details of a betterplace.org client pool.
     *
     * The result is cached for 5 minutes.
     *
     * **:lock: Only available if authenticated as a client.**
     * See [betterplace.org clients](../README.md#client-api).
     *
     * **For [betterplace.org clients](../README.md#client-api):**
     * Use this resource as follows: `/clients/PERMALINK/pool.json`
     */
    get: {
      parameters: {
        path: {
          /** clients_id */
          clients_id: string;
        };
        query: {
          /** The betterplace.org-internal client permalink. */
          client_id: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["PoolResult"];
          };
        };
        /** Error */
        default: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/projects/{projects_id}/pictures.json": {
    /**
     * A list of pictures of a betterplace.org project (donate money).
     * Results are contained in a *data* attribute.
     *
     * *Custom picture-sizes:* This API will only deliver the orginal image.
     * That is the largest image betterplace.org can provide.
     * Please use an image transformation service of your choice to resize this
     * image to your liking. Note, however, that some image names contain
     * non-url-safe characters that might break services such as Sencha Source.
     *
     * We are working on a better solution. Please contact us for more information.
     *
     * In the meantime, the following links might help:
     *
     * * [Sencha Source](http://docs.sencha.io/current/index.html#!/guide/src) provides a simple URL-based solution
     * * [adaptive-images.com](http://adaptive-images.com/) is a self-hosted solution
     * * [Google mod_pagespeed "image resizing"](https://developers.google.com/speed/docs/mod_pagespeed/filter-image-optimize)
     *   should also help – and give you more performance goodies as well
     *
     * **For [betterplace.org clients](../README.md#client-api):**
     * If you request data for a project that is not part of the client
     * projects, the API will return a `404` HTTP code.
     */
    get: {
      parameters: {
        path: {
          /** projects_id */
          projects_id: string;
        };
        query: {
          /** Project id as an integer number ≥ 14. */
          project_id: number;
          page?: number;
          per_page?: number;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": {
              total_entries: number;
              offset: number;
              total_pages: number;
              current_page: number;
              per_page: number;
              data: components["schemas"]["ProjectImageResult"][];
            };
          };
        };
        /** Error */
        default: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/projects/{projects_id}/pictures/{pictures_id}.json": {
    /**
     * The details of a betterplace.org project picture.
     * The details and list view show the same data.
     *
     * *Custom picture-sizes:* [Please read more!](project_picture_list.md)
     *
     * **For [betterplace.org clients](../README.md#client-api):**
     * If you request data for a project that is not part of the client
     * projects, the API will return a `404` HTTP code.
     */
    get: {
      parameters: {
        path: {
          /** projects_id */
          projects_id: string;
          /** pictures_id */
          pictures_id: string;
        };
        query: {
          /** Project id as an integer number ≥ 14. */
          project_id: number;
          /** Picture-id as an integer number ≥ 1. */
          id: number;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["ProjectImageResult"];
          };
        };
        /** Error */
        default: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/clients/{clients_id}/project_statistics.json": {
    /**
     * **For [betterplace.org clients](../README.md#client-api) only:**
     * Some client statistics for a betterplace.org client. All results are cached for 20 minutes.
     */
    get: {
      parameters: {
        path: {
          /** clients_id */
          clients_id: string;
        };
        query: {
          /** The betterplace.org-internal client permalink */
          client_id: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["ClientStatisticProjectResult"];
          };
        };
        /** Error */
        default: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/clients/{clients_id}/projects/{projects_id}/tags.json": {
    /**
     * **For [betterplace.org clients](../README.md#client-api) only:**
     *
     * This API returns all tags assigned by this client for this project.
     * Client project tags are a custom client feature and andministered
     * as a service of [betterplace solutions](http://www.betterplace-solutions.de/#buergerzeitung).
     *
     * Results are contained in a *data* attribute.
     *
     * To guarantee stable search results, all clients are required to specify an order with each
     * request as explained below.
     */
    get: {
      parameters: {
        path: {
          /** clients_id */
          clients_id: string;
          /** projects_id */
          projects_id: string;
        };
        query: {
          /** The betterplace.org-internal client permalink */
          client_id: string;
          /** Project id as an integer number ≥ 14. */
          project_id: number;
          /**
           * Order the result set.
           * <br>
           * It is strongly recommended to <strong>specify an order</strong> with each request.
           * The default order might change at any time without notice.
           * A recommended order is
           * <code>projects_count:asc| slug:asc</code> (without the spaces).
           * <br>
           * <em>Supported orders are:</em>
           * <ul>
           * <li><code>slug:ASC/DESC</code> – tag name
           * <li><code>projects_count:ASC/DESC</code> - how many projects are using that client?
           * </ul>
           * It is possible to set multiple facet filters.
           * <a href="../README.md#request-parameter-format">Learn how to format the parameter</a>.
           */
          order?: string;
          page?: number;
          per_page?: number;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": {
              total_entries: number;
              offset: number;
              total_pages: number;
              current_page: number;
              per_page: number;
              data: components["schemas"]["ClientTagResult"][];
            };
          };
        };
        /** Error */
        default: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/projects.json": {
    /**
     * A list of betterplace.org projects (donate money).
     * Results are contained in a *data* attribute.
     *
     * **For [betterplace.org clients](../README.md#client-api):**
     * Use this resource as follows: `/clients/PERMALINK/projects.json`.
     *
     * To guarantee stable search results,
     * all clients are required to specify at least one facet and order with each request as explained
     * below.
     */
    get: {
      parameters: {
        query: {
          /**
           * Use the scope to specify how the search query <code>q</code> should behave:
           * <ul>
           * <li>"no scope" (default) performs a full text search
           * <li><code>human_name</code> searches only on the manager-fullname and carrier-fullname.
           *   Use this to get all entities by "Unicef" or by "Till Behnke".
           * <li><code>location</code> does a reverse geocoding lookup.
           *   This lookup returns a bounding box. We transform this bounding box to a
           *   rectangle that is large enough to encapsulate the whole bounding box.
           *   We then return all entities that are within this rectangle.
           * </ul>
           * <a href="../README.md#request-parameter-format">Learn how to format the parameter</a>.
           */
          scope?: string;
          /**
           * Order the results by the distance to the given location from near to far.
           * <br>
           * Location can be provided as …
           * <br>
           * <em>… Lat/Lng:</em> <code>52.50,13.45</code>
           * <br>
           * <em>… ZIP:</em> <code>10997 Berlin, Germany</code>.
           * We use the centre of the ZIP code area as center for the search.
           * Please add enough context information (like the Country name)
           * so google knows what place you are looking for.
           * <br>
           * <em>… any location search:</em> All queries other than a float tuple
           * are sent to the google location service. For the provided response we
           * take a fitting lat/lng value as center of the search. So in theory,
           * you can use any search that works for google maps.
           * <br>
           * Check the <code>around_location</code> to see what latitude/longitude
           * values have been used for the query.
           */
          around?: string;
          /**
           * In combination with the <code>around</code> parameter the search will be
           * limited to results whose location is closer than the given value to the
           * location provided through the <code>around</code> parameter. Possible
           * values are all integer values followed by <code>m</code> for meters or
           * <code>km</code> for kilometers, e.g. <code>1000m</code>, <code>1km</code>.
           * <br>
           * When <code>around_distance</code> is given without <code>around</code> it
           * will be ignored.
           */
          around_distance?: string;
          /** For geographic bound filterning: The northeast corner's latitude. */
          nelat?: number;
          /** For geographic bound filterning: The northeast corner's longitude. */
          nelng?: number;
          /** For geographic bound filterning: The southwest corner's latitude. */
          swlat?: number;
          /** For geographic bound filterning: The southwest corner's longitude. */
          swlng?: number;
          /** Search query. The searches behaviour is based on the scope. */
          q?: string;
          /**
           * Filter the result set.
           * <br>
           * It is strongly recommended to <strong>specify facets</strong> with each request.
           * A recommended set of facets is <code>completed:false| closed:false|
           * prohibit_donations:false</code> (without the spaces) which
           * only shows active projects that can receive donations.
           * <br>
           * <em>Supported filters are:</em>
           * <ul>
           * <li><code>completed:true/false</code> –
           * is this project fully financed (100 %)? See <code>completed_at</code>
           * <li><code>closed:true/false</code> –
           * has this project been closed by the project manager? See <code>closed_at</code>
           * <li><code>prohibit_donations:true/false</code> –
           * are donations to this project forbidden at the moment? Closed and blocked projects
           * will always return true, for example.
           * </ul>
           * It is possible to set multiple facet filters.
           * <a href="../README.md#request-parameter-format">Learn how to format the parameter</a>.
           */
          facets?: string;
          /**
           * Order the result set.
           * <br>
           * It is strongly recommended to <strong>specify an order</strong> with each request.
           * The default order might change at any time without notice.
           * A recommended order is <code>score:desc | completed:asc | rank:desc|
           * last_donation_at:desc</code> (without the spaces). This is the order betterplace.org uses
           * <a href="http://www.betterplace.org/en/projects/list">for the project list</a>.
           * <br>
           * <em>Supported orders are:</em>
           * <ul>
           * <li><code>score:ASC/DESC</code> – as provided by the search engine whenever a search term
           * is given.
           * <li><code>rank:ASC/DESC</code> – a betterplace.org-specific, platform-wide activity indicator
           * <li><code>progress_percentage:ASC/DESC</code> – financing goal fulfillment given as 0 to 100
           * <li><code>completed:ASC/DESC</code> – true (1) or false (0)
           * <li><code>created_at:ASC/DESC</code> and <code>updated_at:ASC/DESC</code>
           * <li><code>last_donation_at:ASC/DESC</code>
           * <li><code>id:ASC/DESC</code>
           * </ul>
           * It is possible to set multiple order parameters.
           * <a href="../README.md#request-parameter-format">Learn how to format the parameter</a>.
           */
          order?: string;
          page?: number;
          per_page?: number;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": {
              total_entries: number;
              offset: number;
              total_pages: number;
              current_page: number;
              per_page: number;
              data: components["schemas"]["ProjectResult"][];
            };
          };
        };
        /** Error */
        default: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/projects/{projects_id}.json": {
    /**
     * The details of a betterplace.org project (donate money).
     *
     * **For [betterplace.org clients](../README.md#client-api):**
     * Use this resource as follows: `/clients/PERMALINK/projects/ID.json`
     */
    get: {
      parameters: {
        path: {
          /** projects_id */
          projects_id: string;
        };
        query: {
          /** Project id as an integer number ≥ 14. */
          id: number;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["ProjectResult"];
          };
        };
        /** Error */
        default: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
  "/search.json": {
    /** TODO */
    get: {
      parameters: {
        query: {
          /** Fulltext search query. */
          q?: string;
          /**
           * A string of four comma-seperated floating point geo coordinates in
           * range of -180…180 for <code>sw_lat,sw_lng,ne_lat,ne_lng</code>
           * describing a bounding box around the search results' geo coordinates.
           */
          bounds?: string;
          page?: number;
          per_page?: number;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": {
              total_entries: number;
              offset: number;
              total_pages: number;
              current_page: number;
              per_page: number;
              data: components["schemas"]["SearchResult"][];
            };
          };
        };
        /** Error */
        default: {
          content: {
            "application/json": components["schemas"]["ErrorEnvelope"];
          };
        };
      };
    };
  };
}

export interface components {
  schemas: {
    ErrorEnvelope: {
      name: string;
      status: string;
      status_code: number;
      reason: string;
      backtrace: string[];
      message: string;
      errors?: { [key: string]: any };
      links: string[];
    };
    BlogResult: {
      /** An integer number ≥ 1 */
      id: number;
      /** DateTime (ISO8601 with Timezone) */
      created_at: string;
      /** DateTime (ISO8601 with Timezone) */
      updated_at: string;
      /** Blog posts have only one language at the moment */
      lang: string;
      /**
       * Blogposts are always created by a user, and this
       * field always has the value <code>BlogPost</code>.
       */
      type: string;
      title: string;
      /** DateTime (ISO8601 with Timezone) */
      published_at: string;
      /**
       * The body may contain html such as links, embedded videos, and picture or
       * any of the following HTML tags:
       * ```a, b, br, div, em, i, iframe, img, li, ol, p, strong, ul```.
       */
      body: string;
      /** The user that wrote the blog post. */
      author: components["schemas"]["ContactResult"] | null;
      links: {
        rel: "self" | "platform" | "documentation";
        href: string;
        templated?: boolean;
      }[];
    };
    ContactResult: {
      /** An integer number ≥ 1 */
      id: number;
      /**
       * Display name of a betterplace.org user.
       * Possible formats: "Till B.", "T. Behnke", "Till Behnke".
       *
       * In the case of donation-opinions the name might also be
       * empty/null for anonymous donations for anonymous donations.
       */
      name: string | null;
      /** User profile picture or a fallback image */
      picture?: components["schemas"]["UserProfilePictureResult"];
      links: {
        rel: "platform" | "contact_data";
        href: string;
        templated?: boolean;
      }[];
    };
    UserProfilePictureResult: {
      /** Specifies whether a fallback image is given or not */
      fallback?: boolean;
      links: {
        rel: "fill_100x100" | "original";
        href: string;
        templated?: boolean;
      }[];
    };
    CategoryResult: {
      /** An integer number ≥ 1 */
      id: number;
      /** DateTime (ISO8601 with Timezone) */
      created_at: string;
      /** DateTime (ISO8601 with Timezone) */
      updated_at: string;
      /** Name to be displayed for this category */
      name: string;
      /** Slug for this category */
      slug: string;
      links: {
        rel: "platform";
        href: string;
        templated?: boolean;
      }[];
    };
    ClientDonationResult: {
      /** Donated amount in cents */
      amount_in_cents: number;
      /**
       * At the moment, all donations that are returned by the API are "confirmed".
       * Unconfirmed donations do not show up at all or disappear after they were revoked.
       * Revocations usually take place during the first 14 days – but there are no guarantees.
       *
       * Please make sure to check for the "confirmed" state in your application explicitly since
       * we might add a "revoked" state in the future.
       */
      state: string;
      /** Donor information, if available. */
      donor: components["schemas"]["ContactResult"] | null;
      /**
       * An optional message by users.
       *
       * The body may contain html with any of the following HTML tags:
       * ```b, br, em, i, li, ol, p, strong, ul```.
       */
      message: string | null;
      /** A token uniquely identifies a donation on the platform. */
      token: string;
      /**
       * Client Donations can be identified via a custom client reference token.
       *
       * This <code>client_reference</code> can be provided by users of our
       * <a href="../donation_form/third_party_app_donation_form.md">
       * ThirdPartyApp custom donation form for organisations</a>, for example.
       */
      client_reference: string;
      /** DateTime (ISO8601 with Timezone) */
      created_at: string;
      /**
       * Client donations may go to a <code>Project</code>,
       * a Project's <code>Element</code>, a <code>FundraisingEvent</code>,
       * a <code>Pool</code>.
       */
      receiver_type: string;
      /** The id of the project, project element or fundraising event. */
      receiver_id: number;
      /** The title of the project, project element or fundraising event. */
      receiver_title: string;
      links: {
        rel: "receiver" | "self";
        href: string;
        templated?: boolean;
      }[];
    };
    ClientTagResult: {
      /** The name of the tag. It is unique per client. */
      tag: string;
      /**
       * The slug of the tag. It is unique per client and used to build urls.
       * It must not contain any non url-safe characters.
       */
      slug: string;
      /**
       * The number of <a href="projects_list.md">projects</a>
       * that were tagged with this tag.
       */
      projects_count: number;
      links: {
        rel: "projects";
        href: string;
        templated?: boolean;
      }[];
    };
    ClientResult: {
      links: {
        rel:
          | "projects"
          | "client_donations"
          | "client_project_tags"
          | "client_fundraising_events"
          | "project_mailing_subscriptions"
          | "project_statistics"
          | "fundraising_event_statistics";
        href: string;
        templated?: boolean;
      }[];
    };
    ContactDataResult: {
      /** The first name of the user or donor. */
      first_name: string;
      /** The last name of the user or donor. */
      last_name: string;
      /** The email address of the user or donor. */
      email: string;
    };
    CreatingADirectDepositDonationRequest: {
      /** First name of the donor. */
      first_name: string;
      /** Last name of the donor. */
      last_name: string;
      /** Company name of the donor. */
      company_name: string;
      /**
       * Email address of the donor.
       * Only valid email addresses will be accepted.
       */
      email: string;
      /** A message from the donor to be shown on the project profile page. */
      message: string;
      /**
       * The amount of cents that are donated.
       * Must be a positive integer between
       * 1
       * and 1000000.
       */
      amount_cents: number;
      /**
       * A unique identifier for this transaction.
       * With this reference one can find the donation and its status later
       * by using the client_reference-facet on the
       * <a href="client_donations_list.md">donation list endpoint</a>.
       * <br>
       * Allowed characters are <code>a-zA-Z0-9_-</code>.
       * <br>
       * <em>Attention:</em> If you use a non-unique client reference,
       * the donation pledge endpoint will still respond with success.
       * However the pledge will <em>not be processed</em> into a donation but ignored.
       * <br>
       * This is to make sure that one transaction is only processed once.
       */
      client_reference: string;
      /**
       * The street of the donors address.
       * Used to issue a donation receipt if the donation is tax deductible.
       *
       * This field is required by default, but optional with
       * validate_address=false.
       */
      street: string;
      /**
       * The city of the donors address.
       * Used to issue a donation receipt if the donation is tax deductible.
       *
       * This field is required default, but optional with validate_address=false.
       */
      city: string;
      /**
       * Zip code of the city or region the donor lives in.
       * Used to issue a donation receipt if the donation is tax deductible.
       *
       * This field is required by default, but optional with validate_address=false.
       */
      zip: string;
      /**
       * ISO2 code of the country the donor lives in. A list of valid ISO2 codes
       * can be found at <a href="http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements">
       * Wikipedia ISO_3166-1_alpha-2</a>. Used to issue a donation receipt if
       * the donation is tax deductible.
       *
       * This field is required by default, but optional with validate_address=false.
       */
      country_alpha2: string;
      /**
       * Pass <code>false</code> to allow donations without a donor address.
       * <br>
       * <em>Attention:</em> Donation receipts can only be issued to donors who
       * provide their full address details. Therefore a warning might be
       * in order when using this option: Let donors know that they won't get a
       * donation receipt, or that they will only get a receipt if they do enter
       * their address.
       * <br>
       * True by default.
       */
      validate_address: boolean;
    };
    DirectDepositResult: {
      /**
       * The reference for the pending debit donation. Use it within
       * the transaction to ensure it gets matched with the donation.
       */
      reference_id: number;
      /** DateTime (ISO8601 with Timezone) */
      created_at: string;
      /** DateTime (ISO8601 with Timezone) */
      updated_at: string;
      /** The IBAN for the SEPA transaction. */
      iban: string;
      /** The holder name for the SEPA transaction. */
      holder_name: string;
    };
    CreatingAClientDonationPledgeRequest: {
      /**
       * First name of the donor.
       *
       * This field is required by default, but optional with
       * validate_address=false.
       */
      first_name: string;
      /**
       * Last name of the donor.
       *
       * This field is required by default, but optional with
       * validate_address=false.
       */
      last_name: string;
      /**
       * Email address of the donor.
       * Only valid email addresses will be accepted.
       *
       * This field is required by default, but optional with
       * validate_address=false.
       */
      email: string;
      /**
       * The amount of cents that are donated.
       * Must be a positive integer between
       * 1
       * and 1000000.
       */
      amount_in_cents: number;
      /**
       * A unique identifier for this transaction.
       * With this reference one can find the donation and its status later
       * by using the client_reference-facet on the
       * <a href="client_donations_list.md">donation list endpoint</a>.
       * <br>
       * Allowed characters are <code>a-zA-Z0-9_-</code>.
       * <br>
       * <em>Attention:</em> If you use a non-unique client reference,
       * the donation pledge endpoint will still respond with success.
       * However the pledge will <em>not be processed</em> into a donation but ignored.
       * <br>
       * This is to make sure that one transaction is only processed once.
       */
      client_reference: string;
      /**
       * A tracking identifier for the current campaign, origin or similar
       * information. Default is blank.
       * <br>
       * Allowed characters are <code>a-zA-Z0-9_-</code>.
       */
      tracking_via: string;
      /**
       * An "earmark" indicating which need this donation should go to.
       * <em>Attention:</em> this parameter may be completely ignored by the API
       * at any time. There is no guarantee that the earmark will have an effect
       * on the donation, and support for the feature may be pulled in the
       * future.
       */
      earmark: number;
      /**
       * The street of the donors address.
       * Used to issue a donation receipt if the donation is tax deductible.
       *
       * This field is required by default, but optional with validate_address=false.
       */
      street: string;
      /**
       * The city of the donors address.
       * Used to issue a donation receipt if the donation is tax deductible.
       *
       * This field is required by default, but optional with validate_address=false.
       */
      city: string;
      /**
       * Zip code of the city or region the donor lives in.
       * Used to issue a donation receipt if the donation is tax deductible.
       *
       * This field is required by default, but optional with validate_address=false.
       */
      zip: string;
      /**
       * ISO2 code of the country the donor lives in. A list of valid ISO2 codes
       * can be found at <a href="http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements">
       * Wikipedia ISO_3166-1_alpha-2</a>. Used to issue a donation receipt if
       * the donation is tax deductible.
       *
       * This field is required by default, but optional with validate_address=false.
       */
      country_code: string;
      /**
       * Pass <code>false</code> to allow donations without a donor address.
       * <br>
       * <em>Attention:</em> Donation receipts can only be issued to donors who
       * provide their full address details. Therefore a warning might be
       * in order when using this option: Let donors know that they won't get a
       * donation receipt, or that they will only get a receipt if they do enter
       * their address.
       * <br>
       * True by default.
       */
      validate_address: boolean;
    };
    SuccessResult: {
      /**
       * HTTP status code as a descriptive string.
       * For a list of codes, <a href="http://httpstatus.es/">see httpstatus.es</a>.
       * Example: "accepted" for code 202
       */
      status: string;
      /** HTTP status code as an integer number, e.g. 202. */
      status_code: number;
      links: {
        rel: "location";
        href: string;
        templated?: boolean;
      }[];
    };
    MandateProcessResult: {
      /** An integer number ≥ 1 */
      id: number;
      /** DateTime (ISO8601 with Timezone) */
      created_at: string;
      /** DateTime (ISO8601 with Timezone) */
      updated_at: string;
      /** DateTime (ISO8601 with Timezone) */
      confirmed_at: string;
      /** DateTime (ISO8601 with Timezone) */
      failed_at: string;
      /**
       * One of "pending", "confirmed" or "failed".
       * <ul>
       * <li><code>pending</code>
       * The system is still processing this donation.
       * Please check again soon.
       * <li><code>confirmed</code>
       * The donation is confirmed. This state is final.
       * <li><code>failed</code>
       * The donation failed. Please check the <code>failure_code</code>.
       * This state is final.
       * </ul>
       */
      state: string;
      /**
       * A set of failure codes.<br>
       * You could use this to choose follow up actions in
       * your application. More details about each error are
       * part of the <code>failure_reason</code>.
       * <ul>
       * <li><code>pool_missing</code> No pool available
       * <li><code>pool_empty</code> Not enough money on the pool
       * <li><code>receiver_prohibited_from_receiving_donations</code> The forwarding request's receiver may not receive donations
       * <li><code>donation_invalid</code> Generic error, look at <code>failure_reason</code> for details
       * </ul>
       * This list might be extended at any time. Please
       * make sure you receive a notification if you encounter
       * a new code. Codes will note be removed but might be
       * deprecated and not used anymore at some point in the
       * future.
       */
      failure_code: string;
      /**
       * A more detailed description of the failure.<br>
       * This message is meant to be interpreted by a
       * developer, not by a customer/user.
       * The message might change at any time, don't
       * use it to match actions based on the message
       * string.
       */
      failure_reason: string;
      links: {
        rel: "donation";
        href: string;
        templated?: boolean;
      }[];
    };
    CreatingAClientForwardingRequestRequest: {
      /**
       * The amount of cents that are forwarded.
       * Must be a positive integer between
       * 1
       * and 1000000.
       */
      amount_in_cents: number;
      /**
       * A unique identifier for this transaction.
       * With this reference one can find the donation and its status later
       * by using the client_reference-facet on the
       * <a href="client_donations_list.md">donation list endpoint</a>.
       * <br>
       * Allowed characters are <code>a-zA-Z0-9_-</code>.
       * <br>
       * <em>Attention:</em> If you use a non-unique client reference,
       * the donation pledge endpoint will still respond with success.
       * However the pledge will <em>not be processed</em> into a donation but ignored.
       * <br>
       * This is to make sure that one transaction is only processed once.
       */
      client_reference: string;
      /**
       * A tracking identifier for the current campaign, origin or similar
       * information. Default is blank.
       * <br>
       * Allowed characters are <code>a-zA-Z0-9_-</code>.
       */
      tracking_via: string;
    };
    ProjectResult: {
      /** An integer number ≥ 1 */
      id: number;
      /**
       * DateTime (ISO8601 with Timezone) when the project was created by the
       * project manager.
       */
      created_at: string;
      /** DateTime (ISO8601 with Timezone) */
      updated_at: string;
      /** Decimal degrees based on user input */
      latitude: number;
      /** Decimal degrees based on user input */
      longitude: number;
      /** Street address */
      street: string | null;
      /** ZIP code */
      zip: string | null;
      /** Name of the city */
      city: string | null;
      /** Name of the country */
      country: string | null;
      /** DateTime (ISO8601 with Timezone) */
      content_updated_at: string;
      /**
       * DateTime (ISO8601 with Timezone) when the project was activated
       * by us, otherwise it is null.
       */
      activated_at: string | null;
      /** Max 50 character */
      title: string;
      /**
       * A description of the project. This may contain any of the following
       * HTML tags: ```a, b, br, div, em, i, iframe, img, li, ol, p, strong, ul```.
       */
      description: string;
      /** A short summary of the project.. */
      summary: string;
      /**
       * ⚠️ DEPRECATED!
       *
       * This value is deprecated and will be removed.
       */
      tax_deductible: boolean;
      /**
       * True if the project must not receive donations. This might happen, for example,
       * if a tax receipt of German tax authorities ran out.
       *
       * Please check this flag whenever you display a donation button.
       * Should you show a button for a project that cannot receive donations
       * the user will open the donation form and see an error message on
       * betterplace.org instead!
       */
      donations_prohibited: boolean;
      /**
       * DateTime (ISO8601 with Timezone) of the moment the project was fully
       * funded (100% `progress_percentage`).
       *
       * A completed project may still be active (as in not closed).
       * See `closed_at for details.
       */
      completed_at: string | null;
      /**
       * DateTime (ISO8601 with Timezone) when the project was closed by the
       * project manager.
       *
       * A closed project does not have to be fully funded.
       * See `completed_at` for details.
       */
      closed_at: string | null;
      /** How many cents are needed to complete the project */
      open_amount_in_cents: number;
      /**
       * How many cents are donated already.
       * This includes:
       * - sum of all donations
       * - sum of all forwardings to the project
       * - external donations
       *
       * Subtracting:
       * - backwardings from the project
       */
      donated_amount_in_cents: number;
      /**
       * Number of positive opinions that are given to a project without a donation.
       * Those are plain opinions as well as visitor opinions.
       *
       * DEPRECATED 2017-06-23
       *
       * Use `donations_count` and `comments_count` instead. There is no distinction
       * between positive and negative comments any more, all opinions were converted
       * into comments.
       */
      positive_opinions_count: number;
      /**
       * Number of *negative* opinions (usually 0) that are given to a project without a donation.
       * Those are plain opinions as well as visitor opinions.
       * Critical opinions are part of the betterplace.org
       * ["Web of trust"](http://www.betterplace.org/c/hilfe/woran-erkenne-ich-dass-ein-projekt-vertrauenswurdig-ist/).
       *
       * DEPRECATED 2017-06-23
       *
       * Always returns 0. Don't use this field any more.
       */
      negative_opinions_count: number;
      /** Count of confirmed donations for this project */
      donations_count: number;
      /**
       * Count of active newsletter subscriptions for this project.
       *
       * EXPERIMENTAL 2019-02-21
       *
       * Can be removed at any time. Use with caution
       */
      newsletter_subscriptions_count: number;
      /**
       * Count of all comments for this project. This contains positive and negative
       * reviews of the project, questions and answers by the project manager, as
       * well as comments from users.
       */
      comments_count: number;
      /**
       * ⚠️ DEPRECATED!
       * This value is deprecated and will be removed after 2021-12-31.
       * Please update your code to use the `donations_count`.
       *
       * Number of unique donors, based on the payment-email-address
       */
      donor_count: number;
      /**
       * % financed. Note: We have legacy projects with substantial
       * donation needs (pre ~2014). This percentage includes those needs.
       */
      progress_percentage: number;
      /** Number of needs that still need donations */
      incomplete_need_count: number;
      /** Number of completed needs */
      completed_need_count: number;
      /** Number of blogposts (all types) */
      blog_post_count: number;
      /** The public face of the project / project manager */
      contact?: components["schemas"]["ContactResult"];
      /** The organisation that carries this project */
      carrier: components["schemas"]["CarrierResult"] | null;
      /** TODO */
      profile_picture:
        | components["schemas"]["ProjectProfilePictureResult"]
        | null;
      /**
       * **DEPRECATED** Do not use this data. We will remove the nested
       * matching fund data in the future.
       *
       * To get this data follow the active_matching_fund link and retrieve
       * the data from the appropriate endpoint.
       */
      active_matching_fund: components["schemas"]["MatchingFundResult"] | null;
      /** **This is an experimental feature and is still under heavy development. Please use it with caution.** */
      closed_notice: components["schemas"]["ClosedNoticeResult"] | null;
      links: {
        rel:
          | "self"
          | "platform"
          | "opinions"
          | "pictures"
          | "needs"
          | "blog_posts"
          | "active_matching_fund"
          | "video"
          | "matching_funds"
          | "categories"
          | "new_client_donation"
          | "new_donation";
        href: string;
        templated?: boolean;
      }[];
    };
    CarrierResult: {
      /** An integer number ≥ 1 */
      id: number;
      /** The carrier can be an organisation or user. */
      name: string;
      /** The city in which the carrier resides */
      city: string;
      /** The country in which the carrier resides */
      country: string;
      /** The organisation logo, user profile picture or a fallback image */
      picture?: components["schemas"]["UserProfilePictureResult"];
      links: {
        rel: "self";
        href: string;
        templated?: boolean;
      }[];
    };
    ProjectProfilePictureResult: {
      /** Specifies whether a fallback image is given or not */
      fallback?: boolean;
      links: {
        rel:
          | "fill_960x500"
          | "fill_730x380"
          | "fill_618x322"
          | "fill_410x214"
          | "fill_270x141"
          | "original"
          | "limit_1240x646"
          | "limit_450x235";
        href: string;
        templated?: boolean;
      }[];
    };
    MatchingFundResult: {
      /** An integer number ≥ 1 */
      id: number;
      /** DateTime (ISO8601 with Timezone) */
      created_at: string;
      /** DateTime (ISO8601 with Timezone) */
      updated_at: string;
      /** DateTime (ISO8601 with Timezone) */
      activated_at: string | null;
      /** Our matching fund's name */
      title: string;
      /** The description of the matching fund */
      description: string;
      /** The company that supports it */
      company_name: string;
      /** The client to which the matching fund belongs */
      client_id: string;
      /** The amount in cents the company provided to be matched */
      provided_amount_in_cents: number;
      /** The amount in cents the company already donated */
      donated_amount_in_cents: number;
      /** Current state of this matching fund: either activated or closed */
      state: string;
      /** The URL of the logo image. */
      logo_url: string;
      /** Up to this amount donations get matched by the matching fund */
      maximum_matching_amount_in_cents: number;
      links: {
        rel: "self" | "platform" | "projects" | "documentation";
        href: string;
        templated?: boolean;
      }[];
    };
    ClosedNoticeResult: {
      /** A close notice from the project manager */
      text: string | null;
      links: {
        rel: "call_to_action";
        href: string;
        templated?: boolean;
      }[];
    };
    FundraisingEventForwardingResult: {
      /** The amount in cents the fundraising event has forwarded to this project. */
      forwarded_amount_in_cents: number;
      /** The name of the receiving project */
      title: string;
      /** The ID of the receiving project */
      project_id: number;
      links: {
        rel: "project" | "platform";
        href: string;
        templated?: boolean;
      }[];
    };
    ClientStatisticFundraisingEventResult: {
      /**
       * How many cents are donated already to all fundraising events of this client.
       *
       * It does not include the money of the client-pool-fundraising-event.
       *
       * Remember: This includes all donations to fundraising events of this client even those
       * that are donated via betterplace.org or other channels.
       */
      donated_amount_in_cents: number;
      /**
       * The number of <a href="fundraising_events_list.md">fundraising events</a> of this client.
       *
       * Blocked fundraising events are excluded from this count and from the API in general.
       */
      fundraising_events_count: number;
      /**
       * How many cents are donated through the clients donation page to
       * all fundraising events (those that are active, closed, blocked and so on).
       *
       * The client-pool-fundraising-event is ignored.
       */
      client_donated_amount_in_cents: number;
      /**
       * The number of <a href="client_donations_list.md">client donations</a> for this client to
       * all fundraising events (those that are active, closed, blocked and so on).
       *
       * The client-pool-fundraising-event is ignored.
       */
      client_donations_count: number;
    };
    FundraisingEventResult: {
      /** An integer number ≥ 1 */
      id: number;
      /** DateTime (ISO8601 with Timezone) */
      created_at: string;
      /** DateTime (ISO8601 with Timezone) */
      updated_at: string;
      /** DateTime (ISO8601 with Timezone) */
      content_updated_at: string;
      /** Max 50 character */
      title: string;
      /**
       * A description of the fundraising event. This may contain any of the
       * following HTML tags: ```a, b, br, div, em, i, iframe, img, li, ol, p, strong, ul```.
       * Max 25.000 characters.
       */
      description: string;
      /**
       * ⚠️ DEPRECATED!
       *
       * This value is deprecated and will be removed.
       */
      tax_deductible: boolean;
      /**
       * True if the fundraising event must not and cannot receive donations.
       * This might happen if the event was closed by the manager,
       * blocked by a platform administrator or the donation activation
       * time is in the future.
       *
       * Please check this flag whenever you display a donation button.
       * Should you show a button for an event that cannot receive donations
       * the user will open the donation form and see an error message on
       * betterplace.org instead!
       */
      donations_prohibited: boolean;
      /**
       * DateTime (ISO8601 with Timezone) when the fundraising event was closed
       * by the manager.
       */
      closed_at: string | null;
      /**
       * DateTime (ISO8601 with Timezone). Donations are prohibited until this
       * date and time is reached. Defaults to NULL.
       */
      activate_donations_at: string | null;
      /** Count of confirmed donations for this fundraising event */
      donations_count: number;
      /**
       * ⚠️ DEPRECATED!
       * This value is deprecated and will be removed after 2021-12-31.
       * Please update your code to use the `donations_count`.
       *
       * Number of unique donors, based on the payment-email-address
       */
      donor_count: number;
      /** How many cents were already raised with the fundraising event */
      donated_amount_in_cents: number;
      /**
       * How many cents were requested to be raised with the fundraising event.
       * This value is optional! The manager decides if his event has a goal or not.
       */
      requested_amount_in_cents: number | null;
      /** How many cents were already forwarded to a project. */
      forwarded_amount_in_cents: number;
      /**
       * % financed. This value is only present in case the manager
       * decided to add a <code>requested_amount_in_cents</code>.
       */
      progress_percentage: number | null;
      /** The public face of the fundraising event / fundraising event manager */
      contact?: components["schemas"]["ContactResult"];
      /** TODO */
      profile_picture: components["schemas"]["ProfilePictureResult"] | null;
      links: {
        rel:
          | "self"
          | "featured_projects"
          | "blog_posts"
          | "forwardings"
          | "platform"
          | "opinions"
          | "new_client_donation"
          | "new_donation"
          | "header_picture"
          | "new_message";
        href: string;
        templated?: boolean;
      }[];
    };
    ProfilePictureResult: {
      /** Specifies whether a fallback image is given or not */
      fallback?: boolean;
      links: {
        rel:
          | "fill_960x500"
          | "fill_730x380"
          | "fill_618x322"
          | "fill_410x214"
          | "fill_270x141"
          | "original";
        href: string;
        templated?: boolean;
      }[];
    };
    ClientMailingSubscriptionsRequest: {
      /** The email of the user */
      email: string;
      /** The first name of the user */
      first_name: string;
      /** The last name of the user */
      last_name: string;
      /** State of the subscription: active/inactive */
      active: boolean;
    };
    NeedResult: {
      /** An integer number ≥ 1 */
      id: number;
      /** DateTime (ISO8601 with Timezone) */
      created_at: string;
      /** DateTime (ISO8601 with Timezone) */
      updated_at: string;
      /** Max 50 character */
      title: string;
      description: string;
      /** True if the need is 100 % financed */
      completed: boolean;
      /** % financed */
      progress_percentage: number;
      /**
       * How many cents are donated already.
       * This includes all donations that can be given to a need
       * (direct donation, forwarding of project donation,
       * forwarding of organisation donation,
       * forwarding of fundraising event donations,
       * offline donations and also(!) external donations)
       */
      donated_amount_in_cents: number;
      /** How many cents are still needed to complete the need */
      open_amount_in_cents: number;
      /** How much money is needed in total */
      requested_amount_in_cents: number;
      links: {
        rel: "self" | "project" | "new_client_donation" | "new_donation";
        href: string;
        templated?: boolean;
      }[];
    };
    ClientNewsletterOptInsRequest: {
      /** The email of the user */
      email: string;
      /** The first name of the user */
      first_name: string;
      /** The last name of the user */
      last_name: string;
      /**
       * The text that has been used to explain the subscription to the user.
       * E.g. if you have a checkbox to subscribe, pass its label text.
       *
       * This text must be recorded due to GDPR requirements.
       */
      wording: string;
    };
    DonationResult: {
      /** An integer number ≥ 1 */
      id: number;
      /** DateTime (ISO8601 with Timezone) */
      created_at: string;
      /** DateTime (ISO8601 with Timezone) */
      updated_at: string;
      /**
       * The amount donated, but only if the user allowed the amount to be
       * visible. Most donation forms allow the donor to specify if they
       * want their amount to be visible. As a default, the donated amount
       * is visible.
       *
       * Known issue: For forwarding donations (money that is forwarded from a fundraising event to a project)
       * this field is always empty, which is wrong.
       */
      donated_amount_in_cents: number;
      /**
       * If a matching fund was active during the donation then the amount
       * donated by a user might was matched with another donation.
       *
       * This amount is normally as high as the actual donation amount, with some
       * restrictions, e.g. when the matching fund is depleted or the donation
       * was higher than the maximum matching threshold.
       */
      matched_amount_in_cents: number;
      /**
       * The matched field is true if this is a donor opinion for a donation that
       * was matched by a <a href="matching_fund_details.md">matching fund</a>.
       * It's false otherwise.
       */
      matched: boolean;
      /** Name of the related client, if available. */
      client_name?: string;
      /** DEPRECATED 2017-06-16 - Always returns "positive" */
      score: string;
      /** Donor information, if available. */
      author: components["schemas"]["ContactResult"] | null;
      /** Information about the fundraising event through which the donation came in, if available. */
      backed_by_fundraising_event?: components["schemas"]["FundraisingEventSenderResult"];
      /**
       * An optional message by users.
       *
       * The body may contain html with any of the following HTML tags:
       * ```b, br, em, i, li, ol, p, strong, ul```.
       */
      message: string | null;
      /** DateTime (ISO8601 with Timezone) */
      confirmed_at: string;
      links: {
        rel: "project" | "fundraising_event" | "matching_fund";
        href: string;
        templated?: boolean;
      }[];
    };
    FundraisingEventSenderResult: {
      /** An integer number ≥ 1 */
      id: number;
      /** URL of the fundraising event */
      url: string;
      /** Title of the fundraising event */
      title: string;
      /** Number of donors who donated to the fundraising event */
      donor_count: number;
      /** Company name if it is a sponsored fundraising event */
      sponsoring_name: string;
      links: {
        rel: "sponsoring_logo";
        href: string;
        templated?: boolean;
      }[];
    };
    OrganisationResult: {
      /** An integer number ≥ 1 */
      id: number;
      /** DateTime (ISO8601 with Timezone) */
      created_at: string;
      /** DateTime (ISO8601 with Timezone) */
      updated_at: string;
      /** Decimal degrees based on user input */
      latitude: number;
      /** Decimal degrees based on user input */
      longitude: number;
      /** Street address */
      street: string | null;
      /** ZIP code */
      zip: string | null;
      /** Name of the city */
      city: string | null;
      /** Name of the country */
      country: string | null;
      /** DateTime (ISO8601 with Timezone) */
      content_updated_at: string;
      /**
       * <a href="http://en.wikipedia.org/wiki/Clean_URL#Slug">URL slug</a>
       * for the permalink
       */
      slug: string;
      /** Name of the organisation */
      name: string;
      /**
       * A description of the organisation.
       * This may contain <code>br</code> tags.
       */
      description: string;
      /**
       * ⚠️ DEPRECATED!
       *
       * This value is deprecated and will be removed.
       */
      tax_deductible: boolean;
      /** The public contact person for this organisation. */
      contact?: components["schemas"]["ContactResult"];
      /** TODO */
      picture: components["schemas"]["SquareProfilePictureResult"] | null;
      links: {
        rel: "self" | "platform" | "projects" | "website";
        href: string;
        templated?: boolean;
      }[];
    };
    SquareProfilePictureResult: {
      /** Specifies whether a fallback image is given or not */
      fallback?: boolean;
      links: {
        rel: "fill_100x100" | "fill_200x200" | "fill_400x400" | "original";
        href: string;
        templated?: boolean;
      }[];
    };
    PoolResult: {
      /** An integer number ≥ 1 */
      id: number;
      /** DateTime (ISO8601 with Timezone) */
      created_at: string;
      /** DateTime (ISO8601 with Timezone) */
      updated_at: string;
      /** The amount in cents this pool has received */
      donated_amount_in_cents: number;
      /** The amount in cents the pool has forwarded to projects. */
      forwarded_amount_in_cents: number;
      links: {
        rel: "self";
        href: string;
        templated?: boolean;
      }[];
    };
    ProjectImageResult: {
      /** An integer number ≥ 1 */
      id: number;
      /** DateTime (ISO8601 with Timezone) */
      created_at: string;
      /** DateTime (ISO8601 with Timezone) */
      updated_at: string;
      /** Description of the picture */
      description: string;
      links: {
        rel:
          | "image"
          | "limit_620x323"
          | "limit_620x323_2x"
          | "limit_450x235"
          | "limit_450x235_2x"
          | "self"
          | "parent";
        href: string;
        templated?: boolean;
      }[];
    };
    ClientStatisticProjectResult: {
      /**
       * How many cents are donated already through user donations or forwardings
       * to all client projects.
       *
       * Remember: This includes all donations to projects of this client even those
       * that are donated via betterplace.org or other channels.
       */
      donated_amount_in_cents: number;
      /**
       * ⚠️ DEPRECATED!
       * This value will be removed in the future.
       *
       * How many cents are external donations, that means they were given directly
       * to the project on other, non-betterplace channels.
       */
      external_donated_amount_in_cents: number;
      /**
       * How many cents were requested by all client projects in total.
       * This calculation is based on the sum of all
       * <a href="need_details.md">needs (requested_amount_in_cents)</a>.
       *
       * Calculate the amount of cents that is still missing until all projects
       * are completed like this:
       *   `requested_amount_in_cents - donated_amount_in_cents - external_donated_amount_in_cents`
       */
      requested_amount_in_cents: number;
      /** The number of <a href="projects_list.md">projects</a> of this client. */
      projects_count: number;
      /**
       * How many cents are donated through the client's donation page and forwarded
       * from the clients donation pool or matching funds of this client.
       */
      client_donated_amount_in_cents: number;
      /** The number of <a href="client_donations_list.md">client donations</a> for this client. */
      client_donations_count: number;
    };
    SearchResult: {
      /** An integer number ≥ 1 */
      id: number;
      /** DateTime (ISO8601 with Timezone) */
      created_at: string;
      /** DateTime (ISO8601 with Timezone) */
      updated_at: string;
      /** Decimal degrees based on user input */
      latitude: number;
      /** Decimal degrees based on user input */
      longitude: number;
      /** Name of the entity */
      title: string;
      /** Type of the entity, either Project or FundraisingEvent */
      type: string;
      /** The public face of this entity */
      contact?: components["schemas"]["ContactResult"];
      /** % financed. */
      progress_percentage: number;
      /** TODO */
      profile_picture: components["schemas"]["ProfilePictureResult"] | null;
      /** How many cents were already raised with the fundraising event */
      donated_amount_in_cents: number;
      /** Name where this entity is located */
      country: string | null;
      /** Name where this entity is located */
      city: string | null;
      /** The organisation that carries this project */
      carrier: components["schemas"]["CarrierResult"] | null;
      /** Count of confirmed donations for this entity */
      donations_count: number;
      /** How many cents are needed to complete the project */
      open_amount_in_cents: number;
      links: {
        rel: "platform" | "self" | "pictures";
        href: string;
        templated?: boolean;
      }[];
    };
  };
}

export interface operations {}
